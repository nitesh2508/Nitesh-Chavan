//Nitesh K Chavan


//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------

#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include "tm4c123gh6pm.h"
#include <math.h>
#include <stdio.h>
#define GREEN_LED    (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 3*4)))
//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------
uint16_t A;
uint8_t i=0;
uint32_t x=0;
uint32_t x1=0;
uint8_t fieldposition[10];
uint8_t fieldcount=0;
char s[80];
char str[10];
uint16_t R;
uint8_t mode=5;
uint16_t lut[4096];
int8_t amp,check=0,checkcommand=0;
float f;
float v;
float t;
uint32_t sum;
uint32_t del_phi;
int8_t offset,gain_den;
float Vout1[25];
uint8_t z=0;
uint32_t frequency_table[25];
// Initialize Hardware
void initHw()
{
    // Configure HW to work with 16 MHz XTAL, PLL enabled, system clock of 40 MHz
    SYSCTL_RCC_R = SYSCTL_RCC_XTAL_16MHZ | SYSCTL_RCC_OSCSRC_MAIN | SYSCTL_RCC_USESYSDIV | (4 << SYSCTL_RCC_SYSDIV_S);

    // Set GPIO ports to use APB (not needed since default configuration -- for clarity)
    // Note UART on port A must use APB
    SYSCTL_GPIOHBCTL_R = 0;

    // Enable GPIO port A and F and B peripherals
    SYSCTL_RCGC2_R = SYSCTL_RCGC2_GPIOA | SYSCTL_RCGC2_GPIOF|SYSCTL_RCGC2_GPIOB|SYSCTL_RCGC2_GPIOD|SYSCTL_RCGC2_GPIOE;

    // Configure LED and pushbutton pins
    GPIO_PORTF_DIR_R = 0x08;  // bits 1 and 3 are outputs, other pins are inputs
    GPIO_PORTF_DR2R_R = 0x08; // set drive strength to 2mA (not needed since default configuration -- for clarity)
    GPIO_PORTF_DEN_R = 0x08;  // enable LEDs and pushbuttons


    // Configure UART0 pins
    SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0;         // turn-on UART0, leave other uarts in same status
    GPIO_PORTA_DEN_R |= 3;                           // default, added for clarity
    GPIO_PORTA_AFSEL_R |= 3;                         // default, added for clarity
    GPIO_PORTA_PCTL_R = GPIO_PCTL_PA1_U0TX | GPIO_PCTL_PA0_U0RX;
    // Configure UART0 to 115200 baud, 8N1 format (must be 3 clocks from clock enable and config writes)
    UART0_CTL_R = 0;                                 // turn-off UART0 to allow safe programming
    UART0_CC_R = UART_CC_CS_SYSCLK;                  // use system clock (40 MHz)
    UART0_IBRD_R = 21;                               // r = 40 MHz / (Nx115.2kHz), set floor(r)=21, where N=16
    UART0_FBRD_R = 45;                               // round(fract(r)*64)=45
    UART0_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_FEN; // configure for 8N1 w/ 16-level FIFO
    UART0_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN; // enable TX, RX, and module
      // Configure SSI2 pins for SPI configuration
    SYSCTL_RCGCSSI_R |= SYSCTL_RCGCSSI_R2;           // turn-on SSI2 clocking
    GPIO_PORTB_DIR_R |= 0xB0;                        // make bits 4,5 and 7 outputs
    GPIO_PORTB_DR2R_R |= 0xB0;                       // set drive strength to 2mA
    GPIO_PORTB_AFSEL_R |= 0xB0;
    GPIO_PORTB_DEN_R |= 0xB0; // select alternative functions for MOSI, SCLK pins
    GPIO_PORTB_PCTL_R = GPIO_PCTL_PB7_SSI2TX | GPIO_PCTL_PB4_SSI2CLK|GPIO_PCTL_PB5_SSI2FSS; // map alt fns to SSI                                           // enable digital operation on TX, CLK pins
    GPIO_PORTB_PUR_R |= 0x00;

       // Configure the SSI2 as a SPI master,16 bit operation, 2mbps
     SSI2_CR1_R &= ~SSI_CR1_SSE;                      // turn off SSI2 to allow re-configuration
     SSI2_CR1_R = 0;                                  // select master mode
     SSI2_CC_R = 0;                                   // select system clock as the clock source
     SSI2_CPSR_R = 5;                                // set bit rate to 8mbps (if SR=0 in CR0)
     SSI2_CR0_R = SSI_CR0_SPH | SSI_CR0_FRF_MOTO | SSI_CR0_DSS_16; // set SR=0, (SPH=1, SPO=0), 16-bit
     SSI2_CR1_R |= SSI_CR1_SSE;
     // Configure Timer 1 as the time base
         SYSCTL_RCGCTIMER_R |= SYSCTL_RCGCTIMER_R1;       // turn-on timer
         TIMER1_CTL_R &= ~TIMER_CTL_TAEN;                 // turn-off timer before reconfiguring
         TIMER1_CFG_R = TIMER_CFG_32_BIT_TIMER;           // configure as 32-bit timer (A+B)
         TIMER1_TAMR_R = TIMER_TAMR_TAMR_PERIOD;          // configure for periodic mode (count down)
         TIMER1_TAILR_R =0x64;                     // set load value to 100
         NVIC_EN0_R |= 1 << (INT_TIMER1A-16);
         TIMER1_IMR_R = TIMER_IMR_TATOIM; // turn-on interrupts
         TIMER1_CTL_R |= TIMER_CTL_TAEN;
         // Configure AN0 as an analog input
             SYSCTL_RCGCADC_R |= 1;                           // turn on ADC module 0 clocking
             GPIO_PORTE_AFSEL_R |= 0x08;                      // select alternative functions for AN0 (PE3)
             GPIO_PORTE_DEN_R &= ~0x08;                       // turn off digital operation on pin PE3
             GPIO_PORTE_AMSEL_R |= 0x08;                      // turn on analog operation on pin PE3
             ADC0_CC_R = ADC_CC_CS_SYSPLL;                    // select PLL as the time base (not needed, since default value)
             ADC0_ACTSS_R &= ~ADC_ACTSS_ASEN3;                // disable sample sequencer 3 (SS3) for programming
             ADC0_EMUX_R = ADC_EMUX_EM3_PROCESSOR;           // select SS3 bit in ADCPSSI as trigger
             ADC0_SSMUX3_R = 0;                     // set first sample to AN0
             ADC0_SSMUX1_R = 1;
             ADC0_SSCTL3_R = ADC_SSCTL3_END0;                 // mark first sample as the end
             ADC0_ACTSS_R |= ADC_ACTSS_ASEN3;                           // turn on ADC module 0 clocking
        }
void Timer1Isr()
{
    if(mode==2)
     {
        setvoltage(A);
       GREEN_LED ^=1;
      }
    if(mode==1)
         {
        sum+=del_phi;
        x=sum>>20;
        setvoltage(lut[x]);
        GREEN_LED^=1;
    }
    TIMER1_ICR_R = TIMER_ICR_TATOCINT; // clear interrupt flag

}

// Blocking function that writes a serial character when the UART buffer is not full
void putcUart0(char c)
{
    while (UART0_FR_R & UART_FR_TXFF);
    UART0_DR_R = c;
}

// Blocking function that writes a string when the UART buffer is not full
void putsUart0(char* str)
{
    uint8_t i;
    for (i = 0; i < strlen(str); i++)
      putcUart0(str[i]);
}

// Blocking function that returns with serial data once the buffer is not empty
char getcUart0()
{
    while (UART0_FR_R & UART_FR_RXFE);
    return UART0_DR_R & 0xFF;
}


void waitMicrosecond(uint32_t us)
{
    __asm("WMS_LOOP0:   MOV  R1, #6");          // 1
    __asm("WMS_LOOP1:   SUB  R1, #1");          // 6
    __asm("             CBZ  R1, WMS_DONE1");   // 5+1*3
    __asm("             NOP");                  // 5
    __asm("             NOP");                  // 5
    __asm("             B    WMS_LOOP1");       // 5*2 (speculative, so P=1)
    __asm("WMS_DONE1:   SUB  R0, #1");          // 1
    __asm("             CBZ  R0, WMS_DONE0");   // 1
    __asm("             NOP");                  // 1
    __asm("             B    WMS_LOOP0");       // 1*2 (speculative, so P=1)
    __asm("WMS_DONE0:");                        // ---
                                                // 40 clocks/us + e

}

bool iscommand (char*Verb[],uint8_t minArgs){
    if((strcmp(&s[fieldposition[0]],Verb)==0) && (fieldcount>=minArgs))
            {
                 return true;
            }
        else  {
                     return false;
                 }
             }

void setvoltage(uint16_t data)
{

        SSI2_DR_R = data;                  // write data
        while (SSI2_SR_R & SSI_SR_BSY);    // wait for transmission to stop
}
float getnumber(uint16_t numb){
    float x;
    x= atof(&s[fieldposition[numb]]);
    return x;
}
int16_t readAdc0Ss3()
        {
            //out slow
            ADC0_PSSI_R |= ADC_PSSI_SS3;                     // set start bit
            while (ADC0_ACTSS_R & ADC_ACTSS_BUSY);           // wait until SS3 is not busy
            return ADC0_SSFIFO3_R;                           // get single result from the FIFO
        }

int16_t readAdc0Ss1()
        {   //out fast
            ADC0_PSSI_R |= ADC_PSSI_SS1;                     // set start bit
            while (ADC0_ACTSS_R & ADC_ACTSS_BUSY);           // wait until SS1 is not busy
            return ADC0_SSFIFO3_R;                           // get single result from the FIFO
        }


//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------

int main(void){

    // Initialize hardware
    initHw();

    // Toggle Green LED every 500000 usecond

    GREEN_LED = 1;
    waitMicrosecond(500000);
    GREEN_LED = 0;
    waitMicrosecond(500000);
while(1)
{

putsUart0("   ENTER COMMAND   ");

while (i<=81)
{
    s[i]=getcUart0();
    putcUart0(s[i]);
    if (s[i]==13 || s[i]==10)
    {
        s[i]='\0';
        putsUart0("\r\n");
        break;
    }
    else if (s[i]<32)
    { if (i>=0)
        i--;

    }
    else if(s[i]>=32)
    {
        s[i]=tolower(s[i]);
        i++;
    }


}

//putsUart0(s);
fieldcount=0;
uint8_t strlength= strlen(s);
if (s[0]==46||s[0]==45||(s[0]>47 && s[0]<58))
{
fieldposition[fieldcount]=0;
fieldcount++;
}
else if((s[0]>96 && s[0]<123))
{
   fieldposition[fieldcount]=0;
  fieldcount++;
}
else {
    s[0]='\0';
}
for(i=1;i<=strlength;i++)
{
    if (!((s[i-1]>96&&s[i-1]<123)||(s[i-1]>47&&s[i-1]<58)||(s[i-1]==46||s[i-1]==45)))
    {
        if (s[i]==46||(s[i]>47 && s[i]<58||s[i]==45))
        {

        fieldposition[fieldcount]=i;
        fieldcount++;
        }
        else if((s[i]>96 && s[i]<123))

        {

          fieldposition[fieldcount]=i;
          fieldcount++;
        }else {s[i]='\0';}
               }
    if (!((s[i]>96&&s[i]<123)||(s[i]>47&&s[i]<58)||(s[i]==46||s[i]==45)))
    {
        s[i]='\0';
    }
}
//for (i=0; i<fieldcount; i++)
//{

   // putsUart0(&s[fieldposition[i]]);
   // putsUart0("\r\n");
//}


if(iscommand("sine",2)){
    mode=10;
    f=getnumber(1);
    amp=getnumber(2);
    gain_den=amp;
    offset=0;
    if (fieldcount>2)
    {
     offset=getnumber(3);
    }
    if (amp<6 && amp>-6 && f<100000)
    {
        for(x1=0;x1<4096;x1++)
        {
            lut[x1]=(0x2000+2061+((-385.14)*(amp*sin(2*3.14*x1/4096)+offset)));
        }
        del_phi=(f*pow(2,33))*2.5/1000000;
        mode=1;
        checkcommand=1;
    }
    else {
        putsUart0(" Error in Amp and Freq ");
        putsUart0("\r\n");
    }
}

if(iscommand("dc",1))
    {
       float v;
       putsUart0(&s[fieldposition[1]]);
       putsUart0("\r\n");
       v=getnumber(1);
       R=(-385.14*(v)+2061);
       A =0x2000|R;
       mode=2;
       checkcommand=1;

    }
if(iscommand("voltage",0))
        {

        {
           float raw = readAdc0Ss3();
           t=(3.3*((raw)/4096));
           sprintf(str,"%2.1f",t);
           putsUart0(str);
           checkcommand=1;
        }
        }
if(iscommand("sweep",2))
{    if(mode ==1)
       {
       float freq1=getnumber(1);
       float freq2=getnumber(2);
       uint32_t step=(freq1+freq2)/20;
       uint32_t y=0,Sweep_step;
       z=0;
       check=1;
       for(Sweep_step=freq1;Sweep_step<freq2;Sweep_step+=step)
           {
           waitMicrosecond(100000);
           frequency_table[z]=Sweep_step;
           sprintf(str,"%d",Sweep_step);
           putsUart0(str);
           putsUart0("\t");
           del_phi=(Sweep_step*pow(2,33))*2.5/1000000;
           mode=1;
           float amp1=readAdc0Ss3();
           Vout1[z]=(3.3*(amp1)/4096);
           sprintf(str,"%2.1f",Vout1[z]);
           putsUart0(str);
           putsUart0("\n\r");
           z++;
           checkcommand=1;
           }

       }
        else
        {
            putsUart0("  Error for DC ");
            putsUart0("\r\n");
        }
}
if(iscommand("gain",0)){
    if(check==1){
      uint16_t v=0;
      for(v=0;v<z;v++){
     float gain;
     gain=-20*log(Vout1[v]/gain_den)/log(10);
     sprintf(str,"%d",frequency_table[v]);
     putsUart0(str);
     putsUart0("\t");
     sprintf(str,"%f",gain);
     putsUart0(str);
     putsUart0("\r\n");
     checkcommand=1;
}
}
}

if(iscommand("square",4))
{
    mode = 12;
    offset=0;
    f=getnumber(1);
    amp=getnumber(2);
    offset=getnumber(3);
    float duty1=50;
    if (fieldcount>4)
               {
                   duty1=getnumber(4);
                   putsUart0(&s[fieldposition[4]]);
               }
    float duty_per1;
    duty_per1=(duty1/100)*4096;
 if (amp<6 && amp>-6 && f<100000)
    {
        for(x1=0;x1<duty_per1;x1++)
        {
            lut[x1]=0x2000+2061+(offset*-385.14)+((-385.14)*amp*(1));
        }
        for(x1=duty_per1;x1<4096;x1++)
                {
                    lut[x1]=0x2000+2061+(offset*-385)+((-385.14)*amp*(-1));
                }
        del_phi=(f*pow(2,33))*2.5/1000000;
        mode=1;
        checkcommand=1;
    }
    else{
        putsUart0(" Error in Amp and Freq  ");
        putsUart0("\r\n");
    }
}
if(iscommand("sawtooth",2))
{
        mode = 15;
           if (fieldcount>2)
               {
                offset=getnumber(3);
                putsUart0(&s[fieldposition[3]]);
               }
           f=getnumber(1);
           amp=getnumber(2);
           if (amp<6 && amp>-6 && f>10 && f<100000)
               {
                   for(x1=0;x1<2048;x1++)
                          {
                              lut[x1]=2061+((2061-x1)*amp)/5;
                          }
                   for(x1=2048;x1<4096;x1++)
                                  {
                                      lut[x1]=2061-((x1-2061)*amp)/5;
                                  }

        del_phi=(f*pow(2,33))*2.5/1000000;
        mode=1;
        checkcommand=1;
               }
    else putsUart0(" Error in Amp and Freq ");
}
if(iscommand("triangle",2))
{
        mode = 20;
           if (fieldcount>2)
               {
                offset=getnumber(3);
                putsUart0(&s[fieldposition[3]]);
               }
           f=getnumber(1);
           amp=getnumber(2);
           if (amp<6 && amp>-6 && f>10 && f<100000)
               {
                   for(x1=0;x1<2048;x1++)
                          {
                              lut[x1]=2061+((2061-x1)*amp)/5;
                          }
                   for(x1=2048;x1<4096;x1++)
                                  {
                                      lut[x1]=2061-((x1-2061)*amp)/5;
                                  }

        del_phi=(f*pow(2,33))*2.5/1000000;
        mode=1;
        checkcommand=1;
               }
    else putsUart0(" Error in Amp and Freq ");
}
if(iscommand("reset",0))
{
    mode = 21;
    ResetISR();
    checkcommand=1;
}
if(checkcommand==1)
{
    checkcommand=0;
    putsUart0(" VALID COMMAND  ");
    putsUart0("\r\n");

}
else
{
    putsUart0(" ENTER VALID COMMAND  ");
    putsUart0("\r\n");
}
for (i=0;i<fieldcount;i++)
{
    fieldposition[i]=0;
}
for(i=0;i< strlength;i++)
    s[i]=0;

i=0;
}

}